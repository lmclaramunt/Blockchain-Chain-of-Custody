#!/usr/bin/python
'''
Luis Claramunt
Jacob Babik 
Ben Downes
CSE 469 Group Project
April 28, 2020
'''
import sys
import struct
import os
import hashlib
import time
import uuid
import random
import datetime
import argparse
import collections

Block = collections.namedtuple('Block', ['prev_block_hash', 'time', 'caseID', 'itemID', 'state', 'data_length', 'data'])
chain = []

def initialize(args)  :
    try:
        newFile = open(os.environ.get('BCHOC_FILE_PATH', 'BCHOC_FILE_PATH'), 'rb')
        readBytes = newFile.read(68)
        while len(readBytes) == 68:
            block = struct.unpack('20s d 16s I 11s I', readBytes)
            # newBlock = Block(block[4], parent=block[0], time=block[1], caseId=block[2], itemID=block[3], 
            #     dataLength=block[5], bData=readBytes.read(block[5]))
            # chain.append(newBlock)
            readBytes = newFile.read(68)  
        print('Blockchain file found with INITIAL block.')
    except:
        newFile = open(os.environ.get('BCHOC_FILE_PATH', 'BCHOC_FILE_PATH'), 'wb')
        initialBlock = Block(0, 
            0,
            uuid.uuid4(),
            random.getrandbits(32),
            b'INITIAL\0\0\0\0',
            14,
            b'Initial block\0')
        blockStruct = struct.Struct('20s d 16s I 11s I') 
        blockStruct.pack(0, 
            initialBlock.time, 
            initialBlock.caseID.int.to_bytes(16, byteorder='little'),
            initialBlock.itemID,
            initialBlock.state,
            initialBlock.data_length)      
        # structBlock = struct.pack('20s d 16s I 11s I', str(block.getHash()), block.getTime(), 
        #     str(block.getCaseID().int), block.getItemID(), block.getState(), block.getDataLength())
        newFile.write(blockStruct)
        newFile.write(initialBlock.data.encode())
        newFile.close()
        print('Blockchain file not found. Created INITIAL block.')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('./bchoc', nargs='?', type=str, help='Enter the command you like to execute')
    subParser = parser.add_subparsers(title='commands')

    '''Initialize the Blockchain'''
    bchoc_init = subParser.add_parser('init', description='Initialize the Blockchain.')
    bchoc_init.set_defaults(func=initialize)

    # '''Add a Block to the Blockchain'''
    # add = subParser.add_parser('add')
    # add.add_argument('-c', dest="case_ID", type=str, required=True)
    # add.add_argument('-i', dest="item_ID", type=str, required=True, action='append')
    # add.set_defaults(func=addBlock)

    # checkout = subParser.add_parser('checkout')
    # checkout.add_argument('-i', dest="item_ID", type=str, required=True, nargs='1')
    # checkout.set_defaults(func=Blockchain.checkOut)

    # checkin = subParser.add_parser('checkin')
    # checkin.add_argument('-i', dest="item_ID", type=str, required=True, nargs='1')
    # checkin.set_defaults(func=Blockchain.checkIn)

    # log =subParser.add_parser('log')
    # log.add_argument('-r', required=False)
    # log.add_argument('-n', dest='num', type=int, nargs='*')
    # log.add_argument('-c', dest='case_ID', type=int, nargs='*')
    # log.add_argument('-i', dest='item_ID', type=int, nargs='*')  
    args = parser.parse_args()
    args.func(args)

    # if len(sys.argv) > 1:
    #     if sys.argv[1] == 'init':           #Initialize
    #         blockChain = Blockchain()
    #         blockChain.initialize()
    #     elif sys.argv[1] == 'add':
    #         blockChain = Blockchain()       #Initialize, part of the test, delete later
    #         blockChain.initialize()
    #         #blockChain.addBlock(uid, sys.argv[5:len(sys.argv)])        #Use the line below, uid is for testing 
    #         blockChain.log()
    #         #blockChain.addBlock(sys.argv[3], sys.argv[5:len(sys.argv)])
    #     elif sys.argv[1] == 'checkout':
    #         blockChain.checkOut(sys.argv[3])
    #     elif sys.argv[1] == 'checkin':
    #         blockChain.checkIn(sys.argv[3])
   
if __name__ == "__main__":
    main()
    